<Goal> - <Funcs>
<Funcs> - <Func> <Funcs>
<Funcs> - @
<Func> - <Type> {addFuncType} [Identifier] {addFunction} ( {enteringBlock} <Args> ) { {enteringFunc} <Statements> {exitFunc} } {exitBlock}
<Func> - void {addFuncTypeVoid} [Identifier] {addFunction} ( {enteringBlock} <Args> ) { {enteringFunc} <Statements> {exitFunc} } {exitBlock}
<Func> - void {addFuncTypeVoid} main {addFunctionMain} ( {enteringBlock} ) { <Statements> {exitFunc} } {exitBlock}
<Type> - int {pushTypeInt} <ArrDecl>
<Type> - bool {pushTypeBool} <ArrDecl>
<Type> - char {pushTypeChar} <ArrDecl>
<Type> - string {pushTypeString} <ArrDecl>
<Type> - float {pushTypeFloat} <ArrDecl>
<ArrDecl> - [ [Integer] {specifyArrSize} ]
<ArrDecl> - @
<Args> - <Type> [Identifier] {addArgument} <CommaArgs>
<Args> - @
<CommaArgs> - , <Type> [Identifier] {addArgument} <CommaArgs>
<CommaArgs> - @
<Statements> - <Statement> <Statements>
<Statements> - @
<Statement> - if ( <BoolExpression> ) {ifLabelJZ} { {enteringBlock} <Statements> {elseProcess} } {exitBlock} <Else> {endElse}
<Statement> - while {defLabelAtWhile} ( <BoolExpression> ) {whileLabelJZ} { {enteringBlock} <Statements> {endWhile} } {exitBlock}
<Statement> - print ( <Expression> ) {checkIsNotArray} ; {endStmt}
<Statement> - read ( [Identifier] {print} <Arr> {pushTypeOfId1} ) {checkIsReadable} ; {endStmt}
<Statement> - [Identifier] {print} ( {findFunc} <Expressions> ) {checkParametersWithoutPush} ; {endStmt}
<Statement> - <Type> [Identifier] {addToCharsTable} ; {endStmt}
<Statement> - [Identifier] {print} <Arr> = {pushTypeOfId2} <Expression> {checkTypesAtAssign} ; {endStmt}
<Statement> - return <Expression> {checkFuncType} ; {endStmt}
<Statement> - return ; {checkFuncIsVoid}
<Else> - else { {enteringBlock} <Statements> } {exitBlock}
<Else> - @
<Arr> - [ <FloatExpression> {checkTypeIsInt} ] {pushArr}
<Arr> - @
<Expression> - <VarExpression>
<Expression> - [Char] {pushTypeCharAndPrint}
<Expression> - [String] {print} . <StringExpression> {pushTypeStringAndConcat}
<Expression> - <VarExpression> . {checkTypeIsString} <StringExpression> {pushTypeStringAndConcat}
<Expression> - [String] {pushTypeStringAndPrint}
<Expression> - <FloatWithoutVar> <MulDiv> <FloatProductQuotient> {pushTypeIntOrFloatFrom2} <PlusMinus> <FloatExpression> {pushTypeIntOrFloatFrom2}
<Expression> - <VarExpression> <MulDiv> {checkTypeIsIntOrFloat} <FloatProductQuotient> {pushTypeIntOrFloatFrom2} <PlusMinus> <FloatExpression> {pushTypeIntOrFloatFrom2}
<Expression> - <FloatWithoutVar> <PlusMinus> <FloatExpression> {pushTypeIntOrFloatFrom2}
<Expression> - <VarExpression> <PlusMinus> {checkTypeIsIntOrFloat} <FloatExpression> {pushTypeIntOrFloatFrom2}
<Expression> - <FloatWithoutVar> <MulDiv> <FloatProductQuotient> {pushTypeIntOrFloatFrom2}
<Expression> - <VarExpression> <MulDiv> {checkTypeIsIntOrFloat} <FloatProductQuotient> {pushTypeIntOrFloatFrom2}
<Expression> - <FloatWithoutVar>
<Expression> - <BoolWithoutVar> && <AndResult> {printAnd} || <BoolExpression> {pushTypeBoolAndOr}
<Expression> - <VarExpression> && {checkTypeIsBool} <AndResult> {printAnd} || <BoolExpression> {pushTypeBoolAndOr}
<Expression> - <BoolWithoutVar> || <BoolExpression> {pushTypeBoolAndOr}
<Expression> - <VarExpression> || {checkTypeIsBool} <BoolExpression> {pushTypeBoolAndOr}
<Expression> - <BoolWithoutVar> && <AndResult> {pushTypeBoolAndAnd}
<Expression> - <VarExpression> && {checkTypeIsBool} <AndResult> {pushTypeBoolAndAnd}
<Expression> - <BoolWithoutVar> {pushTypeBool}
<Expressions> - <Expression> {addTypeToCalledFunc} <CommaExpressions>
<Expressions> - @
<CommaExpressions> - , <Expression> {addTypeToCalledFunc} <CommaExpressions>
<CommaExpressions> - @
<FloatWithoutVar> - ( <FloatExpression> )
<FloatWithoutVar> - [FloatPointNumber] {pushTypeFloatAndPrint}
<FloatWithoutVar> - [Integer] {pushTypeIntAndPrint}
<FloatWithoutVar> - [Binary] {pushTypeIntAndPrint}
<FloatWithoutVar> - [Hexadecimal] {pushTypeIntAndPrint}
<FloatWithoutVar> - - <Float> {printUnaryMinus}
<BoolWithoutVar> - bool ( <BoolExpression> )
<BoolWithoutVar> - true {print}
<BoolWithoutVar> - false {print}
<BoolWithoutVar> - ! <Bool> {printNot}
<BoolWithoutVar> - <Comparison> ( <Expression> , <Expression> ) {checkTypesAtComparison}
<VarExpression> - [Identifier] {print} ( {findFunc} <Expressions> ) {checkParameters} <Arr>
<VarExpression> - [Identifier] {print} <Arr> {pushTypeOfId1}
<StringExpression> - [String] {print} . <StringExpression> {printConcat}
<StringExpression> - <VarExpression> {checkTypeIsString} . <StringExpression> {printConcat}
<StringExpression> - [String] {print}
<StringExpression> - <VarExpression> {checkTypeIsString}
<FloatExpression> - <FloatProductQuotient> <PlusMinus> <FloatExpression> {pushTypeIntOrFloatFrom2}
<FloatExpression> - <FloatProductQuotient>
<FloatProductQuotient> - <Float> <MulDiv> <FloatProductQuotient> {pushTypeIntOrFloatFrom2}
<FloatProductQuotient> - <Float>
<Float> - <VarExpression> {checkTypeIsIntOrFloat}
<Float> - ( <FloatExpression> )
<Float> - [FloatPointNumber] {pushTypeFloatAndPrint}
<Float> - [Integer] {pushTypeIntAndPrint}
<Float> - [Binary] {pushTypeIntAndPrint}
<Float> - [Hexadecimal] {pushTypeIntAndPrint}
<Float> - - <Float> {printUnaryMinus}
<BoolExpression> - <AndResult> || <BoolExpression> {printOr}
<BoolExpression> - <AndResult>
<AndResult> - <Bool> && <AndResult> {printAnd}
<AndResult> - <Bool>
<Bool> - <VarExpression> {checkTypeIsBool}
<Bool> - bool ( <BoolExpression> )
<Bool> - true {print}
<Bool> - false {print}
<Bool> - ! <Bool> {printNot}
<Bool> - <Comparison> ( <Expression> , <Expression> ) {checkTypesAtComparison}
<PlusMinus> - + {saveOperation}
<PlusMinus> - - {saveOperation}
<MulDiv> - * {saveOperation}
<MulDiv> - / {saveOperation}
<Comparison> - == {saveComparison}
<Comparison> - != {saveComparison}
<Comparison> - < {saveComparison}
<Comparison> - > {saveComparison}
<Comparison> - <= {saveComparison}
<Comparison> - >= {saveComparison}
